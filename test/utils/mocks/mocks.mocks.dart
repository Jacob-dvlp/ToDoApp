// Mocks generated by Mockito 5.4.4 from annotations
// in todo_app/test/utils/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/src/core/datasource/firebase/firebase.dart'
    as _i2;
import 'package:todo_app/src/core/reposistory/repository.dart' as _i3;
import 'package:todo_app/src/core/reposistory/sign_in_repository.dart'
    as _i4;
import 'package:todo_app/src/demain/usecases/details_usecase_imp.dart'
    as _i9;
import 'package:todo_app/src/demain/usecases/sign_in_usecase_imp.dart'
    as _i7;
import 'package:todo_app/src/demain/usecases/sign_up_usecase_imp.dart'
    as _i6;
import 'package:todo_app/src/demain/usecases/task_usecase_imp.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAuth_0 extends _i1.SmartFake implements _i2.FirebaseAuth {
  _FakeFirebaseAuth_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClientFirebase_1 extends _i1.SmartFake
    implements _i3.ClientFirebase {
  _FakeClientFirebase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignUpRepositoryI_3 extends _i1.SmartFake
    implements _i3.SignUpRepositoryI {
  _FakeSignUpRepositoryI_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSignInRepositoryI_4 extends _i1.SmartFake
    implements _i3.SignInRepositoryI {
  _FakeSignInRepositoryI_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskRepositoryI_5 extends _i1.SmartFake
    implements _i3.TaskRepositoryI {
  _FakeTaskRepositoryI_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailsRepositoryI_6 extends _i1.SmartFake
    implements _i3.DetailsRepositoryI {
  _FakeDetailsRepositoryI_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ClientFirebase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientFirebase extends _i1.Mock implements _i3.ClientFirebase {
  MockClientFirebase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAuth get firebaseAuth => (super.noSuchMethod(
        Invocation.getter(#firebaseAuth),
        returnValue: _FakeFirebaseAuth_0(
          this,
          Invocation.getter(#firebaseAuth),
        ),
      ) as _i2.FirebaseAuth);
}

/// A class which mocks [SignInRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInRepository extends _i1.Mock implements _i4.SignInRepository {
  MockSignInRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ClientFirebase get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClientFirebase_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.ClientFirebase);

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.UserModel>> userSignIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userSignIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.UserModel>>.value(
            _FakeEither_2<_i3.Failure, _i3.UserModel>(
          this,
          Invocation.method(
            #userSignIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.UserModel>>);
}

/// A class which mocks [SignUpRepositoryI].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpRepositoryI extends _i1.Mock implements _i3.SignUpRepositoryI {
  MockSignUpRepositoryI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>> userSignUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userSignUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>.value(
            _FakeEither_2<_i3.Failure, _i3.UserEntite>(
          this,
          Invocation.method(
            #userSignUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>);
}

/// A class which mocks [SignUpUsecaseImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUsecaseImp extends _i1.Mock implements _i6.SignUpUsecaseImp {
  MockSignUpUsecaseImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SignUpRepositoryI get signUpRepositoryI => (super.noSuchMethod(
        Invocation.getter(#signUpRepositoryI),
        returnValue: _FakeSignUpRepositoryI_3(
          this,
          Invocation.getter(#signUpRepositoryI),
        ),
      ) as _i3.SignUpRepositoryI);

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>> userSignUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userSignUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>.value(
            _FakeEither_2<_i3.Failure, _i3.UserEntite>(
          this,
          Invocation.method(
            #userSignUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>);
}

/// A class which mocks [SignInRepositoryI].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInRepositoryI extends _i1.Mock implements _i3.SignInRepositoryI {
  MockSignInRepositoryI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>> userSignIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userSignIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>.value(
            _FakeEither_2<_i3.Failure, _i3.UserEntite>(
          this,
          Invocation.method(
            #userSignIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>);
}

/// A class which mocks [SignInUsecaseImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUsecaseImp extends _i1.Mock implements _i7.SignInUsecaseImp {
  MockSignInUsecaseImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SignInRepositoryI get signInRepositoryI => (super.noSuchMethod(
        Invocation.getter(#signInRepositoryI),
        returnValue: _FakeSignInRepositoryI_4(
          this,
          Invocation.getter(#signInRepositoryI),
        ),
      ) as _i3.SignInRepositoryI);

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>> userSignIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userSignIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>.value(
            _FakeEither_2<_i3.Failure, _i3.UserEntite>(
          this,
          Invocation.method(
            #userSignIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.UserEntite>>);
}

/// A class which mocks [TaskUsecaseImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskUsecaseImp extends _i1.Mock implements _i8.TaskUsecaseImp {
  MockTaskUsecaseImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TaskRepositoryI get taskRepositoryI => (super.noSuchMethod(
        Invocation.getter(#taskRepositoryI),
        returnValue: _FakeTaskRepositoryI_5(
          this,
          Invocation.getter(#taskRepositoryI),
        ),
      ) as _i3.TaskRepositoryI);

  @override
  _i5.Future<_i3.Either<_i3.Failure, int>> createTask({
    required String? isDone,
    required String? title,
    required String? date,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {
            #isDone: isDone,
            #title: title,
            #date: date,
            #description: description,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, int>>.value(
            _FakeEither_2<_i3.Failure, int>(
          this,
          Invocation.method(
            #createTask,
            [],
            {
              #isDone: isDone,
              #title: title,
              #date: date,
              #description: description,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, int>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>> getTaskList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>>.value(
                _FakeEither_2<_i3.Failure, List<_i3.TaskEntitie?>>(
          this,
          Invocation.method(
            #getTaskList,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> deleteAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllTasks,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #deleteAllTasks,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> completetask({
    required int? id,
    required String? isDone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #completetask,
          [],
          {
            #id: id,
            #isDone: isDone,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #completetask,
            [],
            {
              #id: id,
              #isDone: isDone,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i2.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TaskRepositoryI].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepositoryI extends _i1.Mock implements _i3.TaskRepositoryI {
  MockTaskRepositoryI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i3.Failure, int>> createTask({
    required String? isDone,
    required String? title,
    required String? date,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {
            #isDone: isDone,
            #title: title,
            #date: date,
            #description: description,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, int>>.value(
            _FakeEither_2<_i3.Failure, int>(
          this,
          Invocation.method(
            #createTask,
            [],
            {
              #isDone: isDone,
              #title: title,
              #date: date,
              #description: description,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, int>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> completetask({
    required int? id,
    required String? isDone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #completetask,
          [],
          {
            #id: id,
            #isDone: isDone,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #completetask,
            [],
            {
              #id: id,
              #isDone: isDone,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>> getTaskList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>>.value(
                _FakeEither_2<_i3.Failure, List<_i3.TaskEntitie?>>(
          this,
          Invocation.method(
            #getTaskList,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, List<_i3.TaskEntitie?>>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> deleteAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllTasks,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #deleteAllTasks,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);
}

/// A class which mocks [DetailsUsecaseImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailsUsecaseImp extends _i1.Mock implements _i9.DetailsUsecaseImp {
  MockDetailsUsecaseImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DetailsRepositoryI get detailsRepositoryI => (super.noSuchMethod(
        Invocation.getter(#detailsRepositoryI),
        returnValue: _FakeDetailsRepositoryI_6(
          this,
          Invocation.getter(#detailsRepositoryI),
        ),
      ) as _i3.DetailsRepositoryI);

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>> getTaskById(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>>.value(
            _FakeEither_2<_i3.Failure, _i3.TaskEntitie>(
          this,
          Invocation.method(
            #getTaskById,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> deleteTaskById(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #deleteTaskById,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> updateTaskById({
    required String? title,
    required String? description,
    required String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskById,
          [],
          {
            #title: title,
            #description: description,
            #id: id,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #updateTaskById,
            [],
            {
              #title: title,
              #description: description,
              #id: id,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);
}

/// A class which mocks [DetailsRepositoryI].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailsRepositoryI extends _i1.Mock
    implements _i3.DetailsRepositoryI {
  MockDetailsRepositoryI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>> getTaskById(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>>.value(
            _FakeEither_2<_i3.Failure, _i3.TaskEntitie>(
          this,
          Invocation.method(
            #getTaskById,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, _i3.TaskEntitie>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> deleteTaskById(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTaskById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #deleteTaskById,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i3.Failure, bool>> updateTaskById({
    required String? title,
    required String? description,
    required String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskById,
          [],
          {
            #title: title,
            #description: description,
            #id: id,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i3.Failure, bool>>.value(
            _FakeEither_2<_i3.Failure, bool>(
          this,
          Invocation.method(
            #updateTaskById,
            [],
            {
              #title: title,
              #description: description,
              #id: id,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i3.Failure, bool>>);
}
